from telegram import Update
from telegram.ext import ContextTypes
from bot.state import user_state
from analytics.db import SessionLocal
from analytics.models import Listing
from analytics.exporter import generate_excel_report

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üè† –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ù–µ–¥–≤–∏–∂–ò–º–±–∞.\n"
        "–í–≤–µ–¥–∏ /address —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n"
        "–ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π /analytics ‚Äî –∏ —è –ø—Ä–∏—à–ª—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–æ—Ö–æ–∂–∏–º –æ–±—ä–µ–∫—Ç–∞–º."
    )


async def address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∞–¥—Ä–µ—Å:")
    user_state[update.effective_user.id] = "awaiting_address"


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if user_state.get(uid) == "awaiting_address":
        address_text = update.message.text
        context.user_data["address"] = address_text
        user_state[uid] = "address_received"
        await update.message.reply_text(
            f"‚úÖ –ê–¥—Ä–µ—Å –ø—Ä–∏–Ω—è—Ç: {address_text}\n–ò—Å–ø–æ–ª—å–∑—É–π /analytics –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")


async def analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = context.user_data.get("address")
    if not address:
        await update.message.reply_text("üìç –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ /address")
        return

    await update.message.reply_text(f"üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä—è–¥–æ–º —Å: {address}...")

    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    db = SessionLocal()
    listings = db.query(Listing).filter(Listing.address.contains(address)).limit(5).all()

    if listings:
        response = f"üìä –ù–∞–π–¥–µ–Ω–æ {len(listings)} –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É ¬´{address}¬ª:\n"
        for l in listings:
            response += f"- {l.title} ‚Äî {l.price}‚ÇΩ ({l.area} –º¬≤)\n"
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("üôÅ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É.")

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-—Ñ–∞–π–ª–∞
        file_path = generate_excel_report()
        await update.message.reply_document(document=open(file_path, "rb"))
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.")
